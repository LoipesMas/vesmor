@top Program { definition* }

@precedence { decl @cut }


@skip { space }

argDef {
    Identifier ":" Type
}

FunctionDef {
    "(" (argDef ",")* argDef? ")" "->" Type Block 
}


EnumFull {
    TypeName "::" EnumVariant expression?
}

definition {
    LHS {Identifier} "=" RHS { expression } DS {";"}
}

BinaryOperation { "(" expression ( "+." | "-." | "*." | "/." | "<." | ">." | "+" | "-" | "*" | "/" | "~~" | "~" ) expression ")"}

Record {
    "<" (expression "|")? definition* ">"
}

RecordAccess {
    "@" expression "." Identifier
}

FunctionCall {
    FunctionValue { expression } "(" (expression ","?)+ ")"
}

Block { "{" ((definition+ expression) | expression) "}" }

expression {
  FunctionCall
  FunctionDef
  Identifier
  EnumMatching
  EnumFull
  List
  RecordAccess
  Record
  Number
  String
  Block
  BinaryOperation
}

EnumExpr {
  FunctionCall
  Identifier
  BinaryOperation
  String
  Number
  EnumFull
}

EnumVariant {
    Type Tick
}

EnumBranch {
    Pipe {"|"} EnumVariant Identifier? FatArrow expression BS {";"}
}

EnumMatching {
    QM { "?" } EnumExpr EnumBranch+
}

List {
    "[" (expression ",")* expression? "]"
}

Type { (TypeName | (TypeName "<" Type ">"))}

@tokens {
    Tick { "`" }

    FatArrow { "=>" }

    "=>"

    Identifier { $[a-z] $[a-zA-Z_0-9]* }

    TypeName { $[A-Z] $[a-zA-Z_0-9]*}

    Number { $[+-]? ($[0-9]+ "." $[0-9]+ | $[0-9]+ ) }

    String { '"' (!["\\] | "\\" _)* '"' }

    space { $[ \t\n\r]+ }

    "(" ")"

    "?"

    "|"

    "->"

    "{" "}"

    ":" "::" ";" "," "@" "." "<" ">" "[" "]"

    "+." "-." "*." "/." "<." ">." "+" "-" "*" "/" "~~" "~"

    "="

}

@detectDelim
