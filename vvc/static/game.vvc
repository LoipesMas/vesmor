neg = (a: Float) -> Float (0.0 -. a);

min = (a: Float, b: Float) -> Float {
    ? (a <. b)
    | True` => a;
    | False` => b;
};

max = (a: Float, b: Float) -> Float {
    ? (a >. b)
    | True` => a;
    | False` => b;
};

abs = (a: Float) -> Float {
    ? (a >. 0.0)
    | True` => a;
    | False` => neg(a);
};

vec2 = (x: Float, y: Float) -> Vec2 {
    < x = x; y = y;>
};

add_vec2s = (a: Vec2, b: Vec2) -> Vec2 {
    < x = (@a.x +. @b.x); y = (@a.y +. @b.y);>
};

mul_vec2_scalar = (vec: Vec2, scalar: Float) -> Vec2 {
    < x = (@vec.x *. scalar); y = (@vec.y *. scalar);>
};

rotate_vec2 = (v: Vec2, a: Float) -> Vec2 {
    x = @v.x;
    y = @v.y;
    <
        x = ((cos(a) *. x) -. (sin(a) *. y));
        y = ((sin(a) *. x) +. (cos(a) *. y));
    >
};


draw_line = (start: Vec2, end: Vec2) -> Command {
    Command::DrawLine` < start = start; end = end; >
};

DrawLinesAccum : < commands: List<Command>, prev_point: Option<Vec2>>;
draw_lines = (points: List<Vec2>) -> List<Command> {
    f = (accum: DrawLinesAccum, point: Vec2) -> DrawLinesAccum {
        new_commands = ? @accum.prev_point
            | None` => [];
            | Some` prev_point => [draw_line(prev_point, point)];
            ;
        < commands = (@accum.commands ~~ new_commands); prev_point = Option::Some` point;>  
    };
    init_accum = {
        init_f = () -> DrawLinesAccum < commands = []; prev_point = Option::None`;>;
        init_f()
    };
    @list_fold(points, f, init_accum).commands
};

draw_lines_loop = (points: List<Vec2>) -> List<Command> {
    looped_points = ? list_get(points, 0)
        | Some` p => (points ~~ [p]);
        | None` => points;
        ;
    draw_lines(looped_points)
};

draw_rect = (center: Vec2, size: Vec2) -> List<Command> {
    bot_left = < x = (@center.x +. @size.x); y = (@center.y -. @size.y); > ;
    top_left = < x = (@center.x +. @size.x); y = (@center.y +. @size.y); > ;
    top_right = < x = (@center.x -. @size.x); y = (@center.y +. @size.y); > ;
    bot_right = < x = (@center.x -. @size.x); y = (@center.y -. @size.y); > ;
    draw_lines_loop([bot_left, top_left, top_right, bot_right])
};

draw_box = (center: Vec2, size: Float) -> List<Command> draw_rect(center, vec2(size, size));

ball_speed = vec2(0.4, 0.0);
bounce_speed_multiplier = 1.09;


rotated_ball_speed = (angle: Float) -> Vec2 {
    rotate_vec2(ball_speed, angle)
};

ball_speeds = list_map(
    [ 0.3, 2.7, -0.9, 4.0, -0.5, 2.5, 1.1, -2.2],
    rotated_ball_speed
);

Ball : <
    position: Vec2,
    speed: Vec2,
>;
ball_init = <
    position = vec2(0.0, 0.0);
    speed = ? list_get(ball_speeds, 0)
        | Some` speed => speed;
        | None` => vec2(0.3,0.1);
        ;
>;

ball_size = 0.007;

player_size = 0.15;
player_size_half = (player_size /. 2.0);
player_offset = 0.41;
player_move_speed = 0.005;

arena_size_half = 0.45;



Game : <
        player_left : Vec2,
        player_right : Vec2,
        ball : Ball,
        round: Int,
>;

init = <
        player_left = vec2(neg(player_offset),0.0);
        player_right = vec2(player_offset,0.0);
        ball = ball_init;
        round = 0;
     >
;

draw_arena = draw_box(vec2(0.0,0.0), arena_size_half);

draw_ball = (position: Vec2) -> List<Command> {
    draw_box(position, ball_size)
};

player_width = 0.004;
draw_player = (position: Vec2, side: Side) -> List<Command> {
    size = < x = player_width; y = player_size_half;>;
    offset_x = ? side
        | Left` => neg(player_width);
        | Right` => player_width;
        ;
    draw_rect(< position | x = (@position.x +. offset_x);>, size)
};

move = (position: Vec2, speed: Vec2, delta: Float) -> Vec2 {
    add_vec2s(position, mul_vec2_scalar(speed, delta))
};

check_player_ball_collision = (ball_pos: Vec2,player_pos: Vec2) -> Bool {
    y_check = (abs((@player_pos.y -. @ball_pos.y)) <. player_size_half);
    x_check = (abs((@player_pos.x -. @ball_pos.x)) <. ball_size);
    (y_check && x_check)
};

Side : | Left` | Right`;

bounce_ball_player = (game: Game, side: Side) -> Vec2 {
    ball = @game.ball;
    new_speed = mul_vec2_scalar(@ball.speed, bounce_speed_multiplier);
    player_pos = ? side
        | Left` => @game.player_left;
        | Right` => @game.player_right;
        ;
    ? check_player_ball_collision(@ball.position, player_pos)
    | True` => ? side
        | Left` => < new_speed | x = abs(@new_speed.x);>;
        | Right` => < new_speed | x = neg(abs(@new_speed.x));>;
        ;
    | False` => @ball.speed;
};

bounce_ball_ceiling = (ball: Ball) -> Vec2 {
    pos_y = @@ball.position.y;
    speed = @ball.speed;
    arena_size_minus_ball = (arena_size_half -. ball_size);
    ? (pos_y <. neg(arena_size_minus_ball))
    | True` => < speed | y = abs(@speed.y);>;
    | False` => ? (pos_y >. arena_size_minus_ball)
        | True` => < speed | y = neg(abs(@speed.y));>;
        | False` => speed;
        ;
};

ball_movement = (game: Game, delta: Float) -> Ball {
    ball = @game.ball;
    moved_ball_pos = move(@ball.position, @ball.speed, delta);
    moved_ball = < ball | position = moved_ball_pos; >;
    new_game = < game | ball = moved_ball;>;
    bounced_ball_speed_right = bounce_ball_player(new_game, Side::Right`);
    bounced_ball_right = < moved_ball | speed = bounced_ball_speed_right;>;
    newer_game = < new_game | ball = bounced_ball_right;>;
    bounced_ball_speed_both = bounce_ball_player(newer_game, Side::Left`);
    bounced_ball_both_sides = < speed = bounced_ball_speed_both; position = moved_ball_pos;>;
    bounced_ball_final = < position = moved_ball_pos; speed = bounce_ball_ceiling(bounced_ball_both_sides);>;
    bounced_ball_final
};

next_round = (game: Game) -> Game {
    round = (@game.round + 1);
    ball_speed_idx = (round % list_size(ball_speeds));
    new_ball_speed = ? list_get(ball_speeds, ball_speed_idx)
        | Some` speed => speed;
        | None` => vec2(0.0, 0.0);
        ;
    ball_pos = vec2(0.0,0.0);
    < game | round = round; ball = < position = ball_pos; speed = new_ball_speed;>;>
};

check_goals = (game: Game) -> Game {
    ball_pos = @@game.ball.position;
    arena_size_minus_ball = (arena_size_half -. ball_size);
    ? ((@ball_pos.x <. neg(arena_size_minus_ball)) || (@ball_pos.x >. arena_size_minus_ball))
        | True` => next_round(game);
        | False` => game;
};

clamp_player_pos = (pos: Vec2) -> Vec2 {
    pos_y = @pos.y;
    inner_arena_size = (arena_size_half -. player_size_half);
    new_pos_y = min(inner_arena_size, max(neg(inner_arena_size), pos_y));
    < pos | y = new_pos_y;>
};

GameAndCommands : < game: Game, commands: List<Command>>;

draw = (game: Game) -> List<Command> {
    ball_commands = draw_ball(@@game.ball.position);
    left_p_commands = draw_player(@game.player_left, Side::Left`);
    right_p_commands = draw_player(@game.player_right, Side::Right`);
    ((ball_commands ~~ draw_arena) ~~ (left_p_commands ~~ right_p_commands))
};

update_handler = (game: Game, delta: Float) -> GameAndCommands {
    ball = ball_movement(game, delta);
    checked_game = check_goals(<game | ball = ball;>);
    clamped_l_pl = clamp_player_pos(@game.player_left);
    clamped_r_pl = clamp_player_pos(@game.player_right);
    new_game = < checked_game | player_left = clamped_l_pl; player_right = clamped_r_pl; >;
    commands = draw(new_game);
    < game = new_game; commands = commands;>
};

event_handler = (game: Game, event: Event) -> GameAndCommands {
    ? event
        | Tick` delta => update_handler(game, delta);
        | KeyDown` key => {
            new_game = ? key
                | W` => < game | player_left = add_vec2s(@game.player_left, vec2(0.0, player_move_speed));>;
                | F` => < game | player_left = add_vec2s(@game.player_left, vec2(0.0, neg(player_move_speed)));>;
                | U` => < game | player_right = add_vec2s(@game.player_right, vec2(0.0, player_move_speed));>;
                | Y` => < game | player_right = add_vec2s(@game.player_right, vec2(0.0, neg(player_move_speed)));>;
                | _ => game;
                ;
            < game = new_game; commands = []; >
            };
        | _ => < game = game; commands = [];>;
};

